#!/bin/bash
# Summary: add/view/delete the macOS Finder comment value of a file.
#
# Copyright 2024 Michael Hucka.
# License: MIT License â€“ see file "LICENSE" in the project website.
# Website: https://github.com/mhucka/mac-scripts

# Program identification ......................................................

declare -r version_number="0.0.4"
declare -r website="https://github.com/mhucka/mac-scripts"
declare -r program=${0##*/}

# Global configuration ........................................................

set -o nounset -o pipefail
shopt -s nullglob
shopt -s nocasematch

declare overwrite="false"
declare delete="false"
declare set="false"
declare quiet="false"
declare text=""
declare file=""

# Helper functions ............................................................

print_usage() {
cat <<EOF >&2
Usage:
  $program [OPTIONS] PATH [COMMENT]

This takes requires one argument (the path to a file). If given no other
arguments, it prints the Finder comment for the given file and exits. With
other arguments, it will either change or delete the Finder comment.

* To print the Finder comment of a file:
    $program '/path/to/some/file'

* To set the Finder comment of a file (will not overwrite an existing one):
    $program -s 'new comment' '/path/to/some/file'

* To overwrite an existing Finder comment of a file:
    $program -o -s 'new comment' '/path/to/some/file'

* To delete the Finder comment of a file:
    $program -d '/path/to/some/file'

Note: you are advised to surround the file path with quotes, to avoid
misinterpretation of the path by the shell when the path contains spaces or
special characters.

Options:
    -d, --delete     Delete the Finder comment for the given file.
    -o, --overwrite  (Combined with -c) Set the comment even if one exists.
    -q, --quiet      Do not print warnings; only print error messages.
    -s, --set TEXT   Set the finder comment to the given TEXT.
    -h, --help       Print this help message and exit.
    -v, --version    Display the current version number and exit.
EOF
}

print_version() {
    echo "Version: $program $version_number" 1>&2
    echo "Author:  Mike Hucka <mhucka@caltech.edu>" 1>&2
    echo "Website: $website" 1>&2
}

alert() {
    local kind="$1"
    shift
    local msg=$*

    if [[ $kind =~ "warning" && $quiet == "true" ]]; then
        return
    fi

    # Uppercase the first letters of the type and message.
    kind="$(tr '[a-z]' '[A-Z]' <<< ${kind:0:1})${kind:1}"
    msg="$(tr '[a-z]' '[A-Z]' <<< ${msg:0:1})${msg:1}"
    echo -e "[$kind] $msg" 1>&2
}

parse_args() {
    while [[ $# -gt 0 ]]; do
        case $1 in
            -d | --delete)
                delete="true"
                ;;
            -h | --help)
                print_usage
                exit 0
                ;;
            -o | --overwrite)
                overwrite="true"
                ;;
            -q | --quiet)
                quiet="true"
                ;;
            -s | --set)
                text=$2
                set="true"
                shift
                ;;
            -V | --version)
                print_version
                exit 0
                ;;
            -*)
                alert "error" "unrecognized option(s): $*"
                print_usage
                exit 2
                ;;
            *)
                file=$1
                shift
                break
                ;;
        esac
        shift
    done

    if [[ $# -gt 0 ]]; then
        alert "error" "unrecognized argument(s): $*"
        print_usage
        exit 2
    fi
}

# To create an AppleScript inside a Bash script, then pass that to
# osascript, all the while handling file paths that have embedded spaces
# and other special characters in them ... is not easy. The crazy shit
# below is the result of a lot of trial and error.

get_comment() {
    local path=$1
    local line1 line2 line3

    read -r -d '' line1 <<EOF
set _path to POSIX file "$path"
EOF
    line2="set _file to _path as alias"
    line3="tell application \"Finder\" to return comment of _file"

    output=$(osascript -e "$line1" -e "$line2" -e "$line3")
    echo "$output"
}

set_comment () {
    local path=$1
    local comment=$2
    local line1 line2 line3

    read -r -d '' line1 <<EOF
set _path to POSIX file "$path"
EOF
    line2="set _file to _path as alias"
    read -r -d '' line3 <<EOF
tell application "Finder" to set the comment of _file to "$comment"
EOF

    output=$(osascript -e "$line1" -e "$line2" -e "$line3")
    if [[ $output != $comment ]]; then
        alert "error" "Unexpected message from Finder: $output"
        exit 1
    else
        mdimport -i "$path"
    fi
}

delete_comment() {
    local path=$1
    local line1 line2 line3 line4

    read -r -d '' line1 <<EOF
set _path to POSIX file "$path"
EOF
    line2="set _file to _path as alias"
    line3="set _empty to (missing value)"
    line4="tell application \"Finder\" to set the comment of _file to _empty"

    output=$(osascript -e "$line1" -e "$line2" -e "$line3" -e "$line4")
    if [[ $output != "missing value" ]]; then
        alert "error" "Unexpected message from Finder: $output"
        exit 1
    else
        mdimport -i "$path"
    fi
}

# Main body ...................................................................

parse_args "$@"

# Sanity check: does the file actually exist?
if [[ ! -e $file ]]; then
    alert "error" "file not found: $file"
    exit 1
fi

# File exists. Take action based on the options given.
if [[ $overwrite == "false" && $delete == "false" && $set == "false" ]]; then
    # Default action with no arguments is to print the Finder comment.
    comment=$(get_comment "$file")
    if [[ $comment != "" ]]; then
        echo $comment
    else
        alert "warning" "Finder comment is empty"
    fi
elif [[ $delete == "true" ]]; then
    delete_comment "$file"
elif [[ $set == "true" && -z $text ]]; then
    alert "error" "use the -d option to delete comments"
    exit 2
elif [[ -n $text ]]; then
    existing_comment=$(get_comment "$file")
    if [[ -n $existing_comment && $overwrite == "false" ]]; then
        alert "error" "will not overwrite existing comment without -o option"
        exit 2
    fi
    set_comment "$file" "$text"
fi

# If we get here, all went well and we return a normal exit code.
exit 0
